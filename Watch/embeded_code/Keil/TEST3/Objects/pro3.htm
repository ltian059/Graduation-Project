<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\pro3.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\pro3.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Mon Sep 16 11:22:41 2024
<BR><P>
<H3>Maximum Stack Usage =        740 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; $Super$$main &rArr; demoAlgohub &rArr; algohub_read_outputfifo &rArr; sh_read_fifo_data &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[60]">AUDIO_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[39]">BTLE_AGC_EVENT_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[37]">BTLE_CFO_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[36]">BTLE_GP_EVENT_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[3d]">BTLE_INV_APB_ADDR_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[3e]">BTLE_IQ_DATA_VALID_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[3a]">BTLE_RFFE_SPIM_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[3c]">BTLE_RX_AES_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[33]">BTLE_RX_ENG_DET_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[32]">BTLE_RX_RCVD_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[34]">BTLE_SFD_DET_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[35]">BTLE_SFD_TO_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[38]">BTLE_SIG_DET_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[3b]">BTLE_TX_AES_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[31]">BTLE_TX_DONE_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[26]">DMA0_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[54]">DMA10_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[55]">DMA11_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[56]">DMA12_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[57]">DMA13_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[58]">DMA14_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[59]">DMA15_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[27]">DMA1_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[28]">DMA2_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[29]">DMA3_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[4e]">DMA4_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[4f]">DMA5_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[50]">DMA6_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[51]">DMA7_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[52]">DMA8_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[53]">DMA9_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[5d]">DVS_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[5c]">ECC_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[21]">FLC0_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[61]">FLC1_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[22]">GPIO0_IRQHandler</a> from pb.o(.text.GPIO0_IRQHandler) referenced from startup_max32665.o(RESET)
 <LI><a href="#[23]">GPIO1_IRQHandler</a> from pb.o(.text.GPIO1_IRQHandler) referenced from startup_max32665.o(RESET)
 <LI><a href="#[40]">GPIOWAKE_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[67]">HTMR0_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[68]">HTMR1_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[2e]">I2C1_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[48]">I2C2_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from board.o(.text.NMI_Handler) referenced from startup_max32665.o(RESET)
 <LI><a href="#[4d]">OWM_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[a]">PF_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[45]">PT_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[69]">PreInit</a> from system_max32665.o(.text.PreInit) referenced from startup_max32665.o(.text)
 <LI><a href="#[15]">RSV11_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[16]">RSV12_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[1c]">RSV18_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[1d]">RSV19_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[1f]">RSV21_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[20]">RSV22_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[24]">RSV26_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[2a]">RSV32_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[2b]">RSV33_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[2d]">RSV35_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[2f]">RSV37_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[41]">RSV55_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[44]">RSV58_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[47]">RSV61_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[49]">RSV63_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[4a]">RSV64_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[4b]">RSV65_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[62]">RSV88_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[63]">RSV89_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[64]">RSV90_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[65]">RSV91_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[66]">RSV92_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_max32665.o(.text) referenced 2 times from system_max32665.o(.text.SystemInit)
 <LI><a href="#[0]">Reset_Handler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[5f]">SCA_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[4c]">SDHC_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[46]">SDMA0_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[5e]">SIMO_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[42]">SPI0_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[30]">SPIXFC_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from mxc_delay.o(.text.SysTick_Handler) referenced from startup_max32665.o(RESET)
 <LI><a href="#[f]">TMR0_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[10]">TMR1_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[11]">TMR2_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[12]">TMR3_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[13]">TMR4_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[14]">TMR5_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[25]">TPU_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[e]">TRNG_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[18]">UART0_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[19]">UART1_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[2c]">UART2_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[5a]">USBDMA_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[c]">USB_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[b]">WDT0_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[43]">WDT1_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[5b]">WDT2_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[3f]">WUT_IRQHandler</a> from startup_max32665.o(.text) referenced from startup_max32665.o(RESET)
 <LI><a href="#[6a]">__main</a> from __main.o(!!!main) referenced from startup_max32665.o(.text)
 <LI><a href="#[6b]">ext_flash_board_init</a> from board.o(.text.ext_flash_board_init) referenced from board.o(.rodata..L__const.Board_Init.exf_cfg)
 <LI><a href="#[6c]">ext_flash_board_read</a> from board.o(.text.ext_flash_board_read) referenced from board.o(.rodata..L__const.Board_Init.exf_cfg)
 <LI><a href="#[6d]">ext_flash_board_write</a> from board.o(.text.ext_flash_board_write) referenced from board.o(.rodata..L__const.Board_Init.exf_cfg)
 <LI><a href="#[6e]">ext_flash_clock</a> from board.o(.text.ext_flash_clock) referenced from board.o(.rodata..L__const.Board_Init.exf_cfg)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[71]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[124]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[125]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[72]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[126]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[127]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[78]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[73]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[128]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[129]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[130]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[131]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[132]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[133]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[134]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[135]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[136]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[137]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[138]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[139]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[7d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[13d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[13e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[13f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[140]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[141]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[142]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[143]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[70]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[144]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[75]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[77]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[145]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[79]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; $Super$$main &rArr; demoAlgohub &rArr; algohub_read_outputfifo &rArr; sh_read_fifo_data &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[146]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[86]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[147]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = __rt_exit_exit &rArr; _sys_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> system_max32665.o(.text.SystemInit)
<LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>AUDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>BTLE_AGC_EVENT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>BTLE_CFO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>BTLE_GP_EVENT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>BTLE_INV_APB_ADDR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>BTLE_IQ_DATA_VALID_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>BTLE_RFFE_SPIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>BTLE_RX_AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>BTLE_RX_ENG_DET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>BTLE_RX_RCVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>BTLE_SFD_DET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>BTLE_SFD_TO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>BTLE_SIG_DET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>BTLE_TX_AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>BTLE_TX_DONE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DVS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>FLC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIOWAKE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>HTMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>HTMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RSV11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RSV12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RSV18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RSV19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RSV21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RSV22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>RSV26_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RSV32_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RSV33_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RSV35_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RSV37_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RSV55_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RSV58_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RSV61_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>RSV63_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RSV64_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>RSV65_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>RSV88_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>RSV89_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>RSV90_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>RSV91_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>RSV92_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SCA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SDHC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SDMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SIMO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPIXFC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TMR4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TMR5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USBDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WDT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>WDT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WDT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>WUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_max32665.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayInit
</UL>

<P><STRONG><a name="[148]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd_with_data
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah_get_cfg_wearablesuite_aferequest
</UL>

<P><STRONG><a name="[80]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[149]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_read_outputfifo
</UL>

<P><STRONG><a name="[14d]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[14e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[151]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[7b]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[154]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[155]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sub_main.o(.text.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; demoAlgohub &rArr; algohub_read_outputfifo &rArr; sh_read_fifo_data &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[89]"></a>Board_Init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, board.o(.text.Board_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Board_Init &rArr; Console_Init &rArr; MXC_UART_Init &rArr; MXC_UART_RevA_Init &rArr; MXC_UART_SetFrequency &rArr; MXC_UART_RevA_SetFrequency &rArr; MXC_UART_GetFrequency &rArr; MXC_UART_RevA_GetFrequency &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Flash_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8b]"></a>Console_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, board.o(.text.Console_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Console_Init &rArr; MXC_UART_Init &rArr; MXC_UART_RevA_Init &rArr; MXC_UART_SetFrequency &rArr; MXC_UART_RevA_SetFrequency &rArr; MXC_UART_GetFrequency &rArr; MXC_UART_RevA_GetFrequency &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[8a]"></a>Ext_Flash_Configure</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, mx25.o(.text.Ext_Flash_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Ext_Flash_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[22]"></a>GPIO0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(.text.GPIO0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO0_IRQHandler &rArr; MXC_GPIO_Handler &rArr; MXC_GPIO_Common_Handler &rArr; MXC_GPIO_ClearFlags &rArr; MXC_GPIO_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>GPIO1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pb.o(.text.GPIO1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO1_IRQHandler &rArr; MXC_GPIO_Handler &rArr; MXC_GPIO_Common_Handler &rArr; MXC_GPIO_ClearFlags &rArr; MXC_GPIO_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>I2C_MasterRead</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, i2c_ah_sh_api.o(.text.I2C_MasterRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = I2C_MasterRead &rArr; MXC_I2C_Read &rArr; MXC_I2C_RevA_Read &rArr; MXC_I2C_ReadByte &rArr; MXC_I2C_RevA_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Read
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_SetSlaveAddr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[95]"></a>I2C_MasterWrite</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, i2c_ah_sh_api.o(.text.I2C_MasterWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Write
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Stop
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_SetSlaveAddr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
</UL>

<P><STRONG><a name="[8d]"></a>LED_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, led.o(.text.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LED_Init &rArr; MXC_GPIO_Config &rArr; MXC_GPIO_SetVSSEL &rArr; MXC_GPIO_RevA_SetVSSEL
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[97]"></a>LED_Off</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, led.o(.text.LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LED_Off &rArr; MXC_GPIO_OutSet &rArr; MXC_GPIO_RevA_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_OutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[9d]"></a>MXC_Delay</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, mxc_delay.o(.text.MXC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MXC_Delay &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayAbort
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAlgohub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_cmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_pull_mfio_to_low_and_keep
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Recover
</UL>

<P><STRONG><a name="[a0]"></a>MXC_DelayAbort</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mxc_delay.o(.text.MXC_DelayAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_DelayAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_Delay
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Timeout
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayCheck
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayHandler
</UL>

<P><STRONG><a name="[a1]"></a>MXC_DelayAsync</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, mxc_delay.o(.text.MXC_DelayAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Timeout
</UL>

<P><STRONG><a name="[a2]"></a>MXC_DelayCheck</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, mxc_delay.o(.text.MXC_DelayCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_DelayCheck &rArr; MXC_DelayAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Timeout
</UL>

<P><STRONG><a name="[a3]"></a>MXC_DelayHandler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mxc_delay.o(.text.MXC_DelayHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_DelayHandler &rArr; MXC_DelayAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d2]"></a>MXC_FreeLock</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, mxc_lock.o(.text.MXC_FreeLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_FreeLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Transaction
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Clocks
</UL>

<P><STRONG><a name="[a5]"></a>MXC_GPIO_ClearFlags</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio_me14.o(.text.MXC_GPIO_ClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_GPIO_ClearFlags &rArr; MXC_GPIO_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_ClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Common_Handler
</UL>

<P><STRONG><a name="[a7]"></a>MXC_GPIO_Common_Handler</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, gpio_common.o(.text.MXC_GPIO_Common_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MXC_GPIO_Common_Handler &rArr; MXC_GPIO_ClearFlags &rArr; MXC_GPIO_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_ClearFlags
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Handler
</UL>

<P><STRONG><a name="[98]"></a>MXC_GPIO_Config</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, gpio_me14.o(.text.MXC_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MXC_GPIO_Config &rArr; MXC_GPIO_SetVSSEL &rArr; MXC_GPIO_RevA_SetVSSEL
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_SetVSSEL
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_SetAF
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PB_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_set_mfio_as_input
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_pull_mfio_to_high
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_pull_mfio_to_low_and_keep
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_init_hwcomm_interface
</UL>

<P><STRONG><a name="[a8]"></a>MXC_GPIO_GetFlags</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gpio_me14.o(.text.MXC_GPIO_GetFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MXC_GPIO_GetFlags &rArr; MXC_GPIO_RevA_GetFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Common_Handler
</UL>

<P><STRONG><a name="[8f]"></a>MXC_GPIO_Handler</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gpio_me14.o(.text.MXC_GPIO_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MXC_GPIO_Handler &rArr; MXC_GPIO_Common_Handler &rArr; MXC_GPIO_ClearFlags &rArr; MXC_GPIO_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Common_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>MXC_GPIO_OutClr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio_me14.o(.text.MXC_GPIO_OutClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_GPIO_OutClr &rArr; MXC_GPIO_RevA_OutClr
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_OutClr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_pull_mfio_to_low_and_keep
</UL>

<P><STRONG><a name="[99]"></a>MXC_GPIO_OutSet</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio_me14.o(.text.MXC_GPIO_OutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_GPIO_OutSet &rArr; MXC_GPIO_RevA_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_OutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Off
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_pull_mfio_to_high
</UL>

<P><STRONG><a name="[a6]"></a>MXC_GPIO_RevA_ClearFlags</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio_reva.o(.text.MXC_GPIO_RevA_ClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_GPIO_RevA_ClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_ClearFlags
</UL>

<P><STRONG><a name="[ab]"></a>MXC_GPIO_RevA_GetFlags</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, gpio_reva.o(.text.MXC_GPIO_RevA_GetFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_GPIO_RevA_GetFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_GetFlags
</UL>

<P><STRONG><a name="[ac]"></a>MXC_GPIO_RevA_OutClr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio_reva.o(.text.MXC_GPIO_RevA_OutClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_GPIO_RevA_OutClr
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_OutClr
</UL>

<P><STRONG><a name="[ad]"></a>MXC_GPIO_RevA_OutSet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio_reva.o(.text.MXC_GPIO_RevA_OutSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_GPIO_RevA_OutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_OutSet
</UL>

<P><STRONG><a name="[a9]"></a>MXC_GPIO_RevA_SetAF</STRONG> (Thumb, 244 bytes, Stack size 20 bytes, gpio_reva.o(.text.MXC_GPIO_RevA_SetAF))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MXC_GPIO_RevA_SetAF
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
</UL>

<P><STRONG><a name="[ae]"></a>MXC_GPIO_RevA_SetVSSEL</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, gpio_reva.o(.text.MXC_GPIO_RevA_SetVSSEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MXC_GPIO_RevA_SetVSSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_SetVSSEL
</UL>

<P><STRONG><a name="[aa]"></a>MXC_GPIO_SetVSSEL</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gpio_me14.o(.text.MXC_GPIO_SetVSSEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MXC_GPIO_SetVSSEL &rArr; MXC_GPIO_RevA_SetVSSEL
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_RevA_SetVSSEL
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
</UL>

<P><STRONG><a name="[cf]"></a>MXC_GetLock</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, mxc_lock.o(.text.MXC_GetLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MXC_GetLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Transaction
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Clocks
</UL>

<P><STRONG><a name="[af]"></a>MXC_I2C_ClearFlags</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, i2c_me14.o(.text.MXC_I2C_ClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_WriteByte
</UL>

<P><STRONG><a name="[b1]"></a>MXC_I2C_ClearRXFIFO</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, i2c_me14.o(.text.MXC_I2C_ClearRXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MXC_I2C_ClearRXFIFO &rArr; MXC_I2C_RevA_ClearRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_ClearRXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Init
</UL>

<P><STRONG><a name="[b3]"></a>MXC_I2C_ClearTXFIFO</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, i2c_me14.o(.text.MXC_I2C_ClearTXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MXC_I2C_ClearTXFIFO &rArr; MXC_I2C_RevA_ClearTXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_ClearTXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Init
</UL>

<P><STRONG><a name="[b5]"></a>MXC_I2C_Init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, i2c_me14.o(.text.MXC_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MXC_I2C_Init &rArr; MXC_I2C_RevA_Init &rArr; MXC_I2C_Recover &rArr; MXC_I2C_RevA_Recover &rArr; MXC_Delay &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockEnable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Shutdown
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[94]"></a>MXC_I2C_Read</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_me14.o(.text.MXC_I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MXC_I2C_Read &rArr; MXC_I2C_RevA_Read &rArr; MXC_I2C_ReadByte &rArr; MXC_I2C_RevA_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRead
</UL>

<P><STRONG><a name="[ba]"></a>MXC_I2C_ReadByte</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, i2c_me14.o(.text.MXC_I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MXC_I2C_ReadByte &rArr; MXC_I2C_RevA_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Read
</UL>

<P><STRONG><a name="[bc]"></a>MXC_I2C_Recover</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_me14.o(.text.MXC_I2C_Recover))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MXC_I2C_Recover &rArr; MXC_I2C_RevA_Recover &rArr; MXC_Delay &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Recover
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Init
</UL>

<P><STRONG><a name="[b0]"></a>MXC_I2C_RevA_ClearFlags</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, i2c_reva.o(.text.MXC_I2C_RevA_ClearFlags))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ClearFlags
</UL>

<P><STRONG><a name="[b2]"></a>MXC_I2C_RevA_ClearRXFIFO</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, i2c_reva.o(.text.MXC_I2C_RevA_ClearRXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_I2C_RevA_ClearRXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ClearRXFIFO
</UL>

<P><STRONG><a name="[b4]"></a>MXC_I2C_RevA_ClearTXFIFO</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, i2c_reva.o(.text.MXC_I2C_RevA_ClearTXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_I2C_RevA_ClearTXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ClearTXFIFO
</UL>

<P><STRONG><a name="[b8]"></a>MXC_I2C_RevA_Init</STRONG> (Thumb, 498 bytes, Stack size 72 bytes, i2c_reva.o(.text.MXC_I2C_RevA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MXC_I2C_RevA_Init &rArr; MXC_I2C_Recover &rArr; MXC_I2C_RevA_Recover &rArr; MXC_Delay &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_SetSlaveAddr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_SetTXThreshold
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_SetRXThreshold
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Recover
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ClearTXFIFO
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ClearRXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Init
</UL>

<P><STRONG><a name="[b9]"></a>MXC_I2C_RevA_Read</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, i2c_reva.o(.text.MXC_I2C_RevA_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MXC_I2C_RevA_Read &rArr; MXC_I2C_ReadByte &rArr; MXC_I2C_RevA_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Read
</UL>

<P><STRONG><a name="[bb]"></a>MXC_I2C_RevA_ReadByte</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, i2c_reva.o(.text.MXC_I2C_RevA_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_I2C_RevA_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ReadByte
</UL>

<P><STRONG><a name="[bd]"></a>MXC_I2C_RevA_Recover</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, i2c_reva.o(.text.MXC_I2C_RevA_Recover))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MXC_I2C_RevA_Recover &rArr; MXC_Delay &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Recover
</UL>

<P><STRONG><a name="[c3]"></a>MXC_I2C_RevA_SetRXThreshold</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, i2c_reva.o(.text.MXC_I2C_RevA_SetRXThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_I2C_RevA_SetRXThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_SetRXThreshold
</UL>

<P><STRONG><a name="[c4]"></a>MXC_I2C_RevA_SetSlaveAddr</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, i2c_reva.o(.text.MXC_I2C_RevA_SetSlaveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_I2C_RevA_SetSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_SetSlaveAddr
</UL>

<P><STRONG><a name="[c5]"></a>MXC_I2C_RevA_SetTXThreshold</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, i2c_reva.o(.text.MXC_I2C_RevA_SetTXThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MXC_I2C_RevA_SetTXThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_SetTXThreshold
</UL>

<P><STRONG><a name="[c7]"></a>MXC_I2C_RevA_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c_reva.o(.text.MXC_I2C_RevA_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_I2C_RevA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Start
</UL>

<P><STRONG><a name="[c8]"></a>MXC_I2C_RevA_Stop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, i2c_reva.o(.text.MXC_I2C_RevA_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_I2C_RevA_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Stop
</UL>

<P><STRONG><a name="[c0]"></a>MXC_I2C_RevA_Write</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, i2c_reva.o(.text.MXC_I2C_RevA_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Write
</UL>

<P><STRONG><a name="[c2]"></a>MXC_I2C_RevA_WriteByte</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, i2c_reva.o(.text.MXC_I2C_RevA_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_ClearFlags
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_WriteByte
</UL>

<P><STRONG><a name="[bf]"></a>MXC_I2C_SetRXThreshold</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_me14.o(.text.MXC_I2C_SetRXThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_I2C_SetRXThreshold &rArr; MXC_I2C_RevA_SetRXThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_SetRXThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Init
</UL>

<P><STRONG><a name="[92]"></a>MXC_I2C_SetSlaveAddr</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, i2c_me14.o(.text.MXC_I2C_SetSlaveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MXC_I2C_SetSlaveAddr &rArr; MXC_I2C_RevA_SetSlaveAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_SetSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRead
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWrite
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Init
</UL>

<P><STRONG><a name="[be]"></a>MXC_I2C_SetTXThreshold</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, i2c_me14.o(.text.MXC_I2C_SetTXThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MXC_I2C_SetTXThreshold &rArr; MXC_I2C_RevA_SetTXThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_SetTXThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Init
</UL>

<P><STRONG><a name="[b6]"></a>MXC_I2C_Shutdown</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, i2c_me14.o(.text.MXC_I2C_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MXC_I2C_Shutdown &rArr; MXC_SYS_ClockDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[91]"></a>MXC_I2C_Start</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, i2c_me14.o(.text.MXC_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_I2C_Start &rArr; MXC_I2C_RevA_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRead
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWrite
</UL>

<P><STRONG><a name="[93]"></a>MXC_I2C_Stop</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, i2c_me14.o(.text.MXC_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_I2C_Stop &rArr; MXC_I2C_RevA_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRead
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWrite
</UL>

<P><STRONG><a name="[96]"></a>MXC_I2C_Write</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, i2c_me14.o(.text.MXC_I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWrite
</UL>

<P><STRONG><a name="[c1]"></a>MXC_I2C_WriteByte</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, i2c_me14.o(.text.MXC_I2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_RevA_Write
</UL>

<P><STRONG><a name="[c9]"></a>MXC_SPIXF_Clocks</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, spixf_me14.o(.text.MXC_SPIXF_Clocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MXC_SPIXF_Clocks &rArr; MXC_SPIXF_RevA_Clocks &rArr; MXC_GetLock
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Clocks
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_clock
</UL>

<P><STRONG><a name="[cb]"></a>MXC_SPIXF_Enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spixf_me14.o(.text.MXC_SPIXF_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MXC_SPIXF_Enable &rArr; MXC_SPIXF_RevA_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_board_init
</UL>

<P><STRONG><a name="[cd]"></a>MXC_SPIXF_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, spixf_me14.o(.text.MXC_SPIXF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MXC_SPIXF_Init &rArr; MXC_SPIXF_RevA_Init &rArr; MXC_SPIXF_RevA_SetSPIFrequency &rArr; MXC_SPIXF_RevA_GetSPIFrequencyWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockEnable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_board_init
</UL>

<P><STRONG><a name="[ca]"></a>MXC_SPIXF_RevA_Clocks</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_Clocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MXC_SPIXF_RevA_Clocks &rArr; MXC_GetLock
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GetLock
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FreeLock
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SCKFeedbackDisable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SCKFeedbackEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_Clocks
</UL>

<P><STRONG><a name="[cc]"></a>MXC_SPIXF_RevA_Enable</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_SPIXF_RevA_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_Enable
</UL>

<P><STRONG><a name="[e1]"></a>MXC_SPIXF_RevA_GetSPIFrequency</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_GetSPIFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_SPIXF_RevA_GetSPIFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SetSPIFrequency
</UL>

<P><STRONG><a name="[e0]"></a>MXC_SPIXF_RevA_GetSPIFrequencyWrite</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_GetSPIFrequencyWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_SPIXF_RevA_GetSPIFrequencyWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SetSPIFrequency
</UL>

<P><STRONG><a name="[ce]"></a>MXC_SPIXF_RevA_Init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MXC_SPIXF_RevA_Init &rArr; MXC_SPIXF_RevA_SetSPIFrequency &rArr; MXC_SPIXF_RevA_GetSPIFrequencyWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_TXFIFOEnable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_RXFIFOEnable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SetPageSize
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SCKFeedbackEnable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SetCmdValue
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Set3ByteAddr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SetDataWidth
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SetAddrWidth
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SetCmdWidth
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SetSSInactiveTime
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SetSSActiveTime
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SetSPIFrequency
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SetSSPolActiveLow
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_Init
</UL>

<P><STRONG><a name="[d3]"></a>MXC_SPIXF_RevA_RXFIFOEnable</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_RXFIFOEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_SPIXF_RevA_RXFIFOEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[d0]"></a>MXC_SPIXF_RevA_SCKFeedbackDisable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_SCKFeedbackDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_SPIXF_RevA_SCKFeedbackDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Clocks
</UL>

<P><STRONG><a name="[d1]"></a>MXC_SPIXF_RevA_SCKFeedbackEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_SCKFeedbackEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_SPIXF_RevA_SCKFeedbackEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Clocks
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[dc]"></a>MXC_SPIXF_RevA_Set3ByteAddr</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_Set3ByteAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_SPIXF_RevA_Set3ByteAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[da]"></a>MXC_SPIXF_RevA_SetAddrWidth</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_SetAddrWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_SPIXF_RevA_SetAddrWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[d8]"></a>MXC_SPIXF_RevA_SetCmdValue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_SetCmdValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_SPIXF_RevA_SetCmdValue
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[d9]"></a>MXC_SPIXF_RevA_SetCmdWidth</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_SetCmdWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_SPIXF_RevA_SetCmdWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[db]"></a>MXC_SPIXF_RevA_SetDataWidth</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_SetDataWidth))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_SPIXF_RevA_SetDataWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[dd]"></a>MXC_SPIXF_RevA_SetMode</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MXC_SPIXF_RevA_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[de]"></a>MXC_SPIXF_RevA_SetPageSize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_SetPageSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_SPIXF_RevA_SetPageSize
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[d5]"></a>MXC_SPIXF_RevA_SetSPIFrequency</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_SetSPIFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MXC_SPIXF_RevA_SetSPIFrequency &rArr; MXC_SPIXF_RevA_GetSPIFrequencyWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_GetSPIFrequencyWrite
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_GetSPIFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[d6]"></a>MXC_SPIXF_RevA_SetSSActiveTime</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_SetSSActiveTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MXC_SPIXF_RevA_SetSSActiveTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[d7]"></a>MXC_SPIXF_RevA_SetSSInactiveTime</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_SetSSInactiveTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MXC_SPIXF_RevA_SetSSInactiveTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[df]"></a>MXC_SPIXF_RevA_SetSSPolActiveLow</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_SetSSPolActiveLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MXC_SPIXF_RevA_SetSSPolActiveLow
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[d4]"></a>MXC_SPIXF_RevA_TXFIFOEnable</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_TXFIFOEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_SPIXF_RevA_TXFIFOEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Init
</UL>

<P><STRONG><a name="[e2]"></a>MXC_SPIXF_RevA_Transaction</STRONG> (Thumb, 684 bytes, Stack size 56 bytes, spixf_reva.o(.text.MXC_SPIXF_RevA_Transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MXC_SPIXF_RevA_Transaction &rArr; SPIXFC_ReadRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GetLock
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_FreeLock
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIXFC_ReadRXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_Transaction
</UL>

<P><STRONG><a name="[e4]"></a>MXC_SPIXF_Transaction</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, spixf_me14.o(.text.MXC_SPIXF_Transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MXC_SPIXF_Transaction &rArr; MXC_SPIXF_RevA_Transaction &rArr; SPIXFC_ReadRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Transaction
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_board_write
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_flash_board_read
</UL>

<P><STRONG><a name="[c6]"></a>MXC_SYS_ClockDisable</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, sys_me14.o(.text.MXC_SYS_ClockDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_SYS_ClockDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Shutdown
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Shutdown
</UL>

<P><STRONG><a name="[b7]"></a>MXC_SYS_ClockEnable</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, sys_me14.o(.text.MXC_SYS_ClockEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_SYS_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e5]"></a>MXC_SYS_Clock_Select</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, sys_me14.o(.text.MXC_SYS_Clock_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MXC_SYS_Clock_Select &rArr; MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e6]"></a>MXC_SYS_Clock_Timeout</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sys_me14.o(.text.MXC_SYS_Clock_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MXC_SYS_Clock_Timeout &rArr; MXC_DelayAsync &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayCheck
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayAsync
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Select
</UL>

<P><STRONG><a name="[fc]"></a>MXC_SYS_Reset_Periph</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, sys_me14.o(.text.MXC_SYS_Reset_Periph))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MXC_SYS_Reset_Periph
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Shutdown
</UL>

<P><STRONG><a name="[e8]"></a>MXC_UART_GetFrequency</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, uart_me14.o(.text.MXC_UART_GetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MXC_UART_GetFrequency &rArr; MXC_UART_RevA_GetFrequency &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_SetFrequency
</UL>

<P><STRONG><a name="[8e]"></a>MXC_UART_Init</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, uart_me14.o(.text.MXC_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MXC_UART_Init &rArr; MXC_UART_RevA_Init &rArr; MXC_UART_SetFrequency &rArr; MXC_UART_RevA_SetFrequency &rArr; MXC_UART_GetFrequency &rArr; MXC_UART_RevA_GetFrequency &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockEnable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Shutdown
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Console_Init
</UL>

<P><STRONG><a name="[e9]"></a>MXC_UART_RevA_GetFrequency</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, uart_reva.o(.text.MXC_UART_RevA_GetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MXC_UART_RevA_GetFrequency &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetFrequency
</UL>

<P><STRONG><a name="[eb]"></a>MXC_UART_RevA_Init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, uart_reva.o(.text.MXC_UART_RevA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MXC_UART_RevA_Init &rArr; MXC_UART_SetFrequency &rArr; MXC_UART_RevA_SetFrequency &rArr; MXC_UART_GetFrequency &rArr; MXC_UART_RevA_GetFrequency &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetTXThreshold
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetRXThreshold
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetParity
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetStopBits
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetDataSize
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Init
</UL>

<P><STRONG><a name="[f7]"></a>MXC_UART_RevA_SetDataSize</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, uart_reva.o(.text.MXC_UART_RevA_SetDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MXC_UART_RevA_SetDataSize
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetDataSize
</UL>

<P><STRONG><a name="[f6]"></a>MXC_UART_RevA_SetFrequency</STRONG> (Thumb, 496 bytes, Stack size 48 bytes, uart_reva.o(.text.MXC_UART_RevA_SetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MXC_UART_RevA_SetFrequency &rArr; MXC_UART_GetFrequency &rArr; MXC_UART_RevA_GetFrequency &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_GetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetFrequency
</UL>

<P><STRONG><a name="[f8]"></a>MXC_UART_RevA_SetParity</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, uart_reva.o(.text.MXC_UART_RevA_SetParity))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_UART_RevA_SetParity
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetParity
</UL>

<P><STRONG><a name="[f9]"></a>MXC_UART_RevA_SetRXThreshold</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, uart_reva.o(.text.MXC_UART_RevA_SetRXThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MXC_UART_RevA_SetRXThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetRXThreshold
</UL>

<P><STRONG><a name="[fa]"></a>MXC_UART_RevA_SetStopBits</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, uart_reva.o(.text.MXC_UART_RevA_SetStopBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MXC_UART_RevA_SetStopBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetStopBits
</UL>

<P><STRONG><a name="[fb]"></a>MXC_UART_RevA_SetTXThreshold</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, uart_reva.o(.text.MXC_UART_RevA_SetTXThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MXC_UART_RevA_SetTXThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_SetTXThreshold
</UL>

<P><STRONG><a name="[f2]"></a>MXC_UART_SetDataSize</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_me14.o(.text.MXC_UART_SetDataSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MXC_UART_SetDataSize &rArr; MXC_UART_RevA_SetDataSize
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_SetDataSize
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_Init
</UL>

<P><STRONG><a name="[f5]"></a>MXC_UART_SetFrequency</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_me14.o(.text.MXC_UART_SetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MXC_UART_SetFrequency &rArr; MXC_UART_RevA_SetFrequency &rArr; MXC_UART_GetFrequency &rArr; MXC_UART_RevA_GetFrequency &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_SetFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_Init
</UL>

<P><STRONG><a name="[f3]"></a>MXC_UART_SetParity</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart_me14.o(.text.MXC_UART_SetParity))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MXC_UART_SetParity &rArr; MXC_UART_RevA_SetParity
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_SetParity
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_Init
</UL>

<P><STRONG><a name="[f0]"></a>MXC_UART_SetRXThreshold</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_me14.o(.text.MXC_UART_SetRXThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MXC_UART_SetRXThreshold &rArr; MXC_UART_RevA_SetRXThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_SetRXThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_Init
</UL>

<P><STRONG><a name="[f4]"></a>MXC_UART_SetStopBits</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uart_me14.o(.text.MXC_UART_SetStopBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MXC_UART_SetStopBits &rArr; MXC_UART_RevA_SetStopBits
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_SetStopBits
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_Init
</UL>

<P><STRONG><a name="[f1]"></a>MXC_UART_SetTXThreshold</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart_me14.o(.text.MXC_UART_SetTXThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MXC_UART_SetTXThreshold &rArr; MXC_UART_RevA_SetTXThreshold
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_SetTXThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_Init
</UL>

<P><STRONG><a name="[ea]"></a>MXC_UART_Shutdown</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, uart_me14.o(.text.MXC_UART_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MXC_UART_Shutdown &rArr; MXC_SYS_Reset_Periph
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Reset_Periph
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_Init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(.text.NMI_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>PB_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pb.o(.text.PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = PB_Init &rArr; MXC_GPIO_Config &rArr; MXC_GPIO_SetVSSEL &rArr; MXC_GPIO_RevA_SetVSSEL
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
</UL>

<P><STRONG><a name="[fd]"></a>PalSysInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_max32665.o(.text.PalSysInit))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[69]"></a>PreInit</STRONG> (Thumb, 142 bytes, Stack size 4 bytes, system_max32665.o(.text.PreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PreInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mxc_delay.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; MXC_DelayHandler &rArr; MXC_DelayAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_max32665.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, system_max32665.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Select
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[87]"></a>SystemInit</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, system_max32665.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SystemInit &rArr; Board_Init &rArr; Console_Init &rArr; MXC_UART_Init &rArr; MXC_UART_RevA_Init &rArr; MXC_UART_SetFrequency &rArr; MXC_UART_RevA_SetFrequency &rArr; MXC_UART_GetFrequency &rArr; MXC_UART_RevA_GetFrequency &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_ClockEnable
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SYS_Clock_Select
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PalSysInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, stdio.o(.text._sys_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[fe]"></a>ah_get_cfg_wearablesuite_aferequest</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, algohub_config_api.o(.text.ah_get_cfg_wearablesuite_aferequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = ah_get_cfg_wearablesuite_aferequest &rArr; sh_get_sens_cfg &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_sens_cfg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAlgohub
</UL>

<P><STRONG><a name="[101]"></a>ah_set_cfg_wearablesuite_clear_aferequest</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, algohub_config_api.o(.text.ah_set_cfg_wearablesuite_clear_aferequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ah_set_cfg_wearablesuite_clear_aferequest &rArr; sh_set_sens_cfg &rArr; sh_write_cmd_with_data &rArr; sh_write_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_sens_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAlgohub
</UL>

<P><STRONG><a name="[103]"></a>algohub_enable</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, algohub_api.o(.text.algohub_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = algohub_enable &rArr; sh_sensor_enable_ &rArr; sh_write_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_sensor_enable_
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAlgohub
</UL>

<P><STRONG><a name="[105]"></a>algohub_feed_data</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, algohub_api.o(.text.algohub_feed_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = algohub_feed_data &rArr; sh_feed_to_input_fifo &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_feed_to_input_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAlgohub
</UL>

<P><STRONG><a name="[107]"></a>algohub_init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, algohub_api.o(.text.algohub_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = algohub_init &rArr; sh_get_ss_fw_version &rArr; in_bootldr_mode &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_ss_fw_version
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_fifo_thresh
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_data_type
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_Delay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_init_hwcomm_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAlgohub
</UL>

<P><STRONG><a name="[10c]"></a>algohub_read_outputfifo</STRONG> (Thumb, 522 bytes, Stack size 304 bytes, algohub_api.o(.text.algohub_read_outputfifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = algohub_read_outputfifo &rArr; sh_read_fifo_data &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_fifo_data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_sensorhub_status
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAlgohub
</UL>

<P><STRONG><a name="[110]"></a>demoAlgohub</STRONG> (Thumb, 168 bytes, Stack size 88 bytes, demo.o(.text.demoAlgohub))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = demoAlgohub &rArr; algohub_read_outputfifo &rArr; sh_read_fifo_data &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah_get_cfg_wearablesuite_aferequest
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah_set_cfg_wearablesuite_clear_aferequest
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_read_outputfifo
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_feed_data
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_enable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_Delay
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_init
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[111]"></a>i2c_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, i2c_ah_sh_api.o(.text.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = i2c_init &rArr; MXC_I2C_Init &rArr; MXC_I2C_RevA_Init &rArr; MXC_I2C_Recover &rArr; MXC_I2C_RevA_Recover &rArr; MXC_Delay &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_I2C_Shutdown
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_init_hwcomm_interface
</UL>

<P><STRONG><a name="[113]"></a>i2c_read</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, i2c_ah_sh_api.o(.text.i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = i2c_read &rArr; I2C_MasterRead &rArr; MXC_I2C_Read &rArr; MXC_I2C_RevA_Read &rArr; MXC_I2C_ReadByte &rArr; MXC_I2C_RevA_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRead
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_cmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd
</UL>

<P><STRONG><a name="[114]"></a>i2c_write</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, i2c_ah_sh_api.o(.text.i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_cmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd
</UL>

<P><STRONG><a name="[115]"></a>in_bootldr_mode</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, sh_comm.o(.text.in_bootldr_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = in_bootldr_mode &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_ss_fw_version
</UL>

<P><STRONG><a name="[88]"></a>$Super$$main</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, demo.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; demoAlgohub &rArr; algohub_read_outputfifo &rArr; sh_read_fifo_data &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoAlgohub
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>sh_feed_to_input_fifo</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, sh_comm.o(.text.sh_feed_to_input_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = sh_feed_to_input_fifo &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_feed_data
</UL>

<P><STRONG><a name="[ff]"></a>sh_get_sens_cfg</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, sh_comm.o(.text.sh_get_sens_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = sh_get_sens_cfg &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah_get_cfg_wearablesuite_aferequest
</UL>

<P><STRONG><a name="[10d]"></a>sh_get_sensorhub_status</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, sh_comm.o(.text.sh_get_sensorhub_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sh_get_sensorhub_status &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_read_outputfifo
</UL>

<P><STRONG><a name="[10b]"></a>sh_get_ss_fw_version</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, sh_comm.o(.text.sh_get_ss_fw_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = sh_get_ss_fw_version &rArr; in_bootldr_mode &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_bootldr_mode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_init
</UL>

<P><STRONG><a name="[108]"></a>sh_init_hwcomm_interface</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sh_comm.o(.text.sh_init_hwcomm_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sh_init_hwcomm_interface &rArr; i2c_init &rArr; MXC_I2C_Init &rArr; MXC_I2C_RevA_Init &rArr; MXC_I2C_Recover &rArr; MXC_I2C_RevA_Recover &rArr; MXC_Delay &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_init
</UL>

<P><STRONG><a name="[116]"></a>sh_read_cmd</STRONG> (Thumb, 434 bytes, Stack size 48 bytes, sh_comm.o(.text.sh_read_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_set_mfio_as_input
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_pull_mfio_to_high
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_pull_mfio_to_low_and_keep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;in_bootldr_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_sens_cfg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_fifo_data
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_sensorhub_status
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_feed_to_input_fifo
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_get_ss_fw_version
</UL>

<P><STRONG><a name="[10f]"></a>sh_read_fifo_data</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, sh_comm.o(.text.sh_read_fifo_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sh_read_fifo_data &rArr; sh_read_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_read_outputfifo
</UL>

<P><STRONG><a name="[104]"></a>sh_sensor_enable_</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, sh_comm.o(.text.sh_sensor_enable_))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sh_sensor_enable_ &rArr; sh_write_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_enable
</UL>

<P><STRONG><a name="[109]"></a>sh_set_data_type</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, sh_comm.o(.text.sh_set_data_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = sh_set_data_type &rArr; sh_write_cmd_with_data &rArr; sh_write_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd_with_data
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_init
</UL>

<P><STRONG><a name="[10a]"></a>sh_set_fifo_thresh</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sh_comm.o(.text.sh_set_fifo_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = sh_set_fifo_thresh &rArr; sh_write_cmd_with_data &rArr; sh_write_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd_with_data
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;algohub_init
</UL>

<P><STRONG><a name="[102]"></a>sh_set_sens_cfg</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, sh_comm.o(.text.sh_set_sens_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sh_set_sens_cfg &rArr; sh_write_cmd_with_data &rArr; sh_write_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd_with_data
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah_set_cfg_wearablesuite_clear_aferequest
</UL>

<P><STRONG><a name="[117]"></a>sh_write_cmd</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, sh_comm.o(.text.sh_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = sh_write_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_set_mfio_as_input
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_pull_mfio_to_high
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_pull_mfio_to_low_and_keep
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd_with_data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_sensor_enable_
</UL>

<P><STRONG><a name="[118]"></a>sh_write_cmd_with_data</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, sh_comm.o(.text.sh_write_cmd_with_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = sh_write_cmd_with_data &rArr; sh_write_cmd &rArr; i2c_write &rArr; I2C_MasterWrite &rArr; MXC_I2C_Write &rArr; MXC_I2C_RevA_Write &rArr; MXC_I2C_WriteByte &rArr; MXC_I2C_RevA_WriteByte &rArr; MXC_I2C_ClearFlags &rArr; MXC_I2C_RevA_ClearFlags
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_sens_cfg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_fifo_thresh
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_set_data_type
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_GetFrequency
</UL>

<P><STRONG><a name="[119]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_GetFrequency
</UL>

<P><STRONG><a name="[11c]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_GetFrequency
</UL>

<P><STRONG><a name="[11f]"></a>_ddiv</STRONG> (Thumb, 560 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[11b]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[11e]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[120]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_UART_RevA_GetFrequency
</UL>

<P><STRONG><a name="[122]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[123]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[74]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[157]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[158]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[11a]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9b]"></a>LPM_pull_mfio_to_low_and_keep</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sh_comm.o(.text.LPM_pull_mfio_to_low_and_keep))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LPM_pull_mfio_to_low_and_keep &rArr; MXC_Delay &rArr; MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_OutClr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_cmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd
</UL>

<P><STRONG><a name="[9a]"></a>LPM_pull_mfio_to_high</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sh_comm.o(.text.LPM_pull_mfio_to_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LPM_pull_mfio_to_high &rArr; MXC_GPIO_Config &rArr; MXC_GPIO_SetVSSEL &rArr; MXC_GPIO_RevA_SetVSSEL
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_OutSet
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_cmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd
</UL>

<P><STRONG><a name="[9e]"></a>LPM_set_mfio_as_input</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sh_comm.o(.text.LPM_set_mfio_as_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LPM_set_mfio_as_input &rArr; MXC_GPIO_Config &rArr; MXC_GPIO_SetVSSEL &rArr; MXC_GPIO_RevA_SetVSSEL
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_read_cmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sh_write_cmd
</UL>

<P><STRONG><a name="[112]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, i2c_ah_sh_api.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[6b]"></a>ext_flash_board_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, board.o(.text.ext_flash_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ext_flash_board_init &rArr; MXC_SPIXF_Init &rArr; MXC_SPIXF_RevA_Init &rArr; MXC_SPIXF_RevA_SetSPIFrequency &rArr; MXC_SPIXF_RevA_GetSPIFrequencyWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_Enable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.rodata..L__const.Board_Init.exf_cfg)
</UL>
<P><STRONG><a name="[6c]"></a>ext_flash_board_read</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, board.o(.text.ext_flash_board_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ext_flash_board_read &rArr; MXC_SPIXF_Transaction &rArr; MXC_SPIXF_RevA_Transaction &rArr; SPIXFC_ReadRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_Transaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.rodata..L__const.Board_Init.exf_cfg)
</UL>
<P><STRONG><a name="[6d]"></a>ext_flash_board_write</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, board.o(.text.ext_flash_board_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ext_flash_board_write &rArr; MXC_SPIXF_Transaction &rArr; MXC_SPIXF_RevA_Transaction &rArr; SPIXFC_ReadRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_Transaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.rodata..L__const.Board_Init.exf_cfg)
</UL>
<P><STRONG><a name="[6e]"></a>ext_flash_clock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, board.o(.text.ext_flash_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ext_flash_clock &rArr; MXC_SPIXF_Clocks &rArr; MXC_SPIXF_RevA_Clocks &rArr; MXC_GetLock
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_Clocks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> board.o(.rodata..L__const.Board_Init.exf_cfg)
</UL>
<P><STRONG><a name="[e3]"></a>SPIXFC_ReadRXFIFO</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, spixf_reva.o(.text.SPIXFC_ReadRXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIXFC_ReadRXFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_SPIXF_RevA_Transaction
</UL>

<P><STRONG><a name="[9f]"></a>MXC_DelayInit</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, mxc_delay.o(.text.MXC_DelayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MXC_DelayInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_Delay
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MXC_DelayAsync
</UL>

<P><STRONG><a name="[121]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[11d]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
